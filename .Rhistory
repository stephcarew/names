name = "xmlns", node = NULL, isHTML = FALSE)
doc
doc
temp <-newXMLDoc(dtd = "", namespaces="xmlns:gsx", addFinalizer = TRUE,
name = "xmlns", node = NULL, isHTML = FALSE)
temp
class(temp)
as.list(temp)
req[6]
doc[6]
library(XML)
doc <- xmlTreeParse(req,useInternal = TRUE)
doc[6]
library(XML)
doc[6]
doc
class(doc)
library(XML)
doc <- xmlTreeParse(req[6],useInternal = TRUE)
req[6]
t<-POST("https://spreadsheets.google.com/feeds/list/1jbHoYctIyj3d-naSekRrtGFnxrxoY7StAUr7p5H0bDM/od6/private/full", config(token = google_token), body = req[6], content_type="application/atom+xml")
POST("https://spreadsheets.google.com/feeds/list/1jbHoYctIyj3d-naSekRrtGFnxrxoY7StAUr7p5H0bDM/od6/private/full", config(token = google_token), body = req[6], content_type="application/atom+xml")
x<-xmlParseString(node)
x<-body=saveXML(node)
x<-saveXML(node)
x
class(x)
<entry xmlns="http://www.w3.org/2005/Atom"
xmlns:gsx="http://schemas.google.com/spreadsheets/2006/extended">
<gsx:hours>1</gsx:hours>
<gsx:ipm>1</gsx:ipm>
<gsx:items>60</gsx:items>
<gsx:name>Elizabeth Bennet</gsx:name>
</entry>
t<-"<entry xmlns=\"http://www.w3.org/2005/Atom\" xmlns:gsx=\"http://schemas.google.com/spreadsheets/2006/extended\">\n   <gsx:choice_1>60</gsx:choice_1>\n</entry>"
class(t)
POST("https://spreadsheets.google.com/feeds/list/1jbHoYctIyj3d-naSekRrtGFnxrxoY7StAUr7p5H0bDM/od6/private/full", config(token = google_token), body = t, content_type="application/atom+xml")
POST("https://spreadsheets.google.com/feeds/list/1jbHoYctIyj3d-naSekRrtGFnxrxoY7StAUr7p5H0bDM/od6/private/full", config(token = google_token), body = t)
node
POST("https://spreadsheets.google.com/feeds/list/1jbHoYctIyj3d-naSekRrtGFnxrxoY7StAUr7p5H0bDM/od6/private/full", config(token = google_token), body = saveXML(node))
saveXML(node)
POST("https://spreadsheets.google.com/feeds/list/1jbHoYctIyj3d-naSekRrtGFnxrxoY7StAUr7p5H0bDM/od6/private/full", config(token = google_token), body = "<entry xmlns="http://www.w3.org/2005/Atom" xmlns:gsx="http://schemas.google.com/spreadsheets/2006/extended">\n   <gsx:choice_1>60</gsx:choice_1>\n</entry>")
POST("https://spreadsheets.google.com/feeds/list/1jbHoYctIyj3d-naSekRrtGFnxrxoY7StAUr7p5H0bDM/od6/private/full", config(token = google_token), body = "<entry xmlns=\"http://www.w3.org/2005/Atom"\n xmlns:gsx=\"http://schemas.google.com/spreadsheets/2006/extended\">\n   <gsx:choice_1>60</gsx:choice_1>\n</entry>")
POST("https://spreadsheets.google.com/feeds/list/1jbHoYctIyj3d-naSekRrtGFnxrxoY7StAUr7p5H0bDM/od6/private/full", config(token = google_token), body = "<entry xmlns=\"http://www.w3.org/2005/Atom\"\n xmlns:gsx=\"http://schemas.google.com/spreadsheets/2006/extended\">\n   <gsx:choice_1>60</gsx:choice_1>\n</entry>")
req <- GET("https://spreadsheets.google.com/feeds/list/1jbHoYctIyj3d-naSekRrtGFnxrxoY7StAUr7p5H0bDM/od6/private/full", config(token = google_token))
req[1]
req$content
req$content[1]
xmlTreeParse(req$content)
xmlTreeParse(req$content,useInternal = TRUE)
xmlTreeParse(req)
t<-useInternal = TRUE
t<-xmlTreeParse(req,useInternal = TRUE)
t
t[1]
root<-xmlRoot(t)
root
root[1]
root[2]
root[6]
root[5]
root[4]
root[43
root[3]
root[8]
root[9]
root
root[12]
root[[12]]
root[[12]][[1]]
root[[12]][[10]]
saveXML(root[[12]][[10]])
saveXML(root[[12]])
POST("https://spreadsheets.google.com/feeds/list/1jbHoYctIyj3d-naSekRrtGFnxrxoY7StAUr7p5H0bDM/od6/private/full", config(token = google_token), body = "<entry xmlns=\"http://www.w3.org/2005/Atom\"\n xmlns:gsx=\"http://schemas.google.com/spreadsheets/2006/extended\">\n   <gsx:choice1>60</gsx:choice1>\n</entry>")
POST("https://spreadsheets.google.com/feeds/list/1jbHoYctIyj3d-naSekRrtGFnxrxoY7StAUr7p5H0bDM/od6/private/full", config(token = google_token), body = "<entry xmlns=\"http://www.w3.org/2005/Atom\" xmlns:gsx=\"http://schemas.google.com/spreadsheets/2006/extended\">\n   <gsx:choice1>60</gsx:choice1>\n</entry>")
POST("https://spreadsheets.google.com/feeds/list/1jbHoYctIyj3d-naSekRrtGFnxrxoY7StAUr7p5H0bDM/od6/private/full", config(token = google_token), body = "<entry xmlns=\"http://www.w3.org/2005/Atom\" xmlns:gsx=\"http://schemas.google.com/spreadsheets/2006/extended\">\n   <gsx:choice1>60</gsx:choice1>\n</entry>")
saveXML(root[[12]])
node
node[1]
node[1] <-  <gsx:choice1>60</gsx:choice1>
node[1] <-  "<gsx:choice1>60</gsx:choice1>"
node = newXMLNode("entry")
> xmlAttrs(node)["xmlns"] = "http://www.w3.org/2005/Atom"
> node
<entry xmlns="http://www.w3.org/2005/Atom"/>
> xmlAttrs(node)["xmlns:gsx"] = "http://schemas.google.com/spreadsheets/2006/extended"
node = newXMLNode("gsx:choice1", parent = node)
xmlNamespace(node)
xmlNamespace(node)<-gsx
xmlNamespace(node)<-"gsx"
xmlNamespace(xmlRoot(node))<-"gsx"
node2 = newXMLNode("entry", namespace = "gsx")
node = newXMLNode("entry")
> xmlAttrs(node)["xmlns"] = "http://www.w3.org/2005/Atom"
> xmlAttrs(node)["xmlns:gsx"] = "http://schemas.google.com/spreadsheets/2006/extended"
node = newXMLNode("choice1", parent = node, namespace = “gsx”)
node = newXMLNode("entry")
xmlAttrs(node)["xmlns"] = "http://www.w3.org/2005/Atom"
xmlAttrs(node)["xmlns:gsx"] = "http://schemas.google.com/spreadsheets/2006/extended"
node = newXMLNode("choice1", parent = node, namespace = “gsx”)
node = newXMLNode("entry")
xmlAttrs(node)["xmlns"] = "http://www.w3.org/2005/Atom"
xmlAttrs(node)["xmlns:gsx"] = "http://schemas.google.com/spreadsheets/2006/extended"
node = newXMLNode("choice1", parent = node, namespace = gsx)
node = newXMLNode("entry")
xmlAttrs(node)["xmlns"] = "http://www.w3.org/2005/Atom"
xmlAttrs(node)["xmlns:gsx"] = "http://schemas.google.com/spreadsheets/2006/extended"
node = newXMLNode("choice1", parent = node, namespace = "gsx")
newXMLNamespace(node, c("xmlns:gsx" ="http://schemas.google.com/spreadsheets/2006/extended"" )
newXMLNamespace(node, c("xmlns:gsx" ="http://schemas.google.com/spreadsheets/2006/extended" )
newXMLNamespace(node, c("xmlns:gsx" ="http://schemas.google.com/spreadsheets/2006/extended")
newXMLNamespace(node, c("xmlns:gsx" ="http://schemas.google.com/spreadsheets/2006/extended"))
saveXML(node)
t<-saveXML(node)
"<entry xmlns=\"http://www.w3.org/2005/Atom\" xmlns:gsx=\"http://schemas.google.com/spreadsheets/2006/extended\">\n  <choice1/>\n</entry>" == t
z<-"<entry xmlns=\"http://www.w3.org/2005/Atom\" xmlns:gsx=\"http://schemas.google.com/spreadsheets/2006/extended\">\n  <gsx:choice1>60</gsx:choice1>\n</entry>"
POST("https://spreadsheets.google.com/feeds/list/1jbHoYctIyj3d-naSekRrtGFnxrxoY7StAUr7p5H0bDM/od6/private/full", config(token = google_token), body = z)
POST("https://spreadsheets.google.com/feeds/list/1jbHoYctIyj3d-naSekRrtGFnxrxoY7StAUr7p5H0bDM/od6/private/full", config(token = google_token), body = z, content_type = "application/atom+xml")
te<-POST("https://spreadsheets.google.com/feeds/list/1jbHoYctIyj3d-naSekRrtGFnxrxoY7StAUr7p5H0bDM/od6/private/full", config(token = google_token), body = z, content_type = "application/atom+xml")
te
xmlTreeParse(te)
xmlTreeParse(te,useInternal = TRUE)
req[1]
req[2]
te[`]
te[1]
te[2]
te[3]
te[4]
te[5]
te[6]
te[7]
te[8]
te[9]
t<-<entry xmlns="http://www.w3.org/2005/Atom"
xmlns:gsx="http://schemas.google.com/spreadsheets/2006/extended">
<gsx:hours>1</gsx:hours>
<gsx:ipm>1</gsx:ipm>
<gsx:items>60</gsx:items>
<gsx:name>Elizabeth Bennet</gsx:name>
</entry>
library(httr)
POST(url ="https://zapier.com/hooks/catch/ojzxln/",body = list(choice1 = C), encode = "form")
POST("https://zapier.com/hooks/catch/ojzxln/" ,body = list(choice1 = C), encode = "form")
POST("https://zapier.com/hooks/catch/ojzxln" ,body = list(choice1 = C), encode = "form")
url = "https://zapier.com/hooks/catch/ojzxln/"
POST(url ,body = list(choice1 = C), encode = "form")
url <- "https://zapier.com/hooks/catch/ojzxln/"
class9url
class(url)
url
POST(https://zapier.com/hooks/catch/ojzxln,body = list(choice1 = C), encode = "form")
req <- GET("https://spreadsheets.google.com/feeds/list/1jbHoYctIyj3d-naSekRrtGFnxrxoY7StAUr7p5H0bDM/od6/private/full", config(token = google_token))
POST("https://zapier.com/hooks/catch/ojzxln" ,body = NULL)
POST("https://zapier.com/hooks/catch/ojzxln" ,body = list(choice1 = "C"), encode = "form")
POST("https://zapier.com/hooks/catch/ojzxln" ,body = list(choice1 = "C"), encode = "form")
POST("https://spreadsheets.google.com/feeds/list/1jbHoYctIyj3d-naSekRrtGFnxrxoY7StAUr7p5H0bDM/od6/private/full", config(token = google_token),body = list(choice1 = "C"), encode = "form")
POST("https://zapier.com/hooks/catch/ojzxln" ,body = list(choice1 = "C"), encode = "form")
t = POST("https://zapier.com/hooks/catch/ojzxln" ,body = list(choice1 = "C"), encode = "form")
t
t[1]
t[6]
library(XML)
doc <- xmlTreeParse(t,useInternal = TRUE)
library(XML)
doc <- xmlTreeParse(t$content,useInternal = TRUE)
library(XML)
doc <- xmlTreeParse(t)
t[7]
t[8]
t[9]
POST("https://zapier.com/hooks/catch/ojzxln")
t = POST("http://requestb.in/18k381z1" ,body = list(choice1 = "C"), encode = "form")
t = POST("https://zapier.com/hooks/catch/ojzxln/" ,body = list(choice1 = "C"), encode = "form")
t = POST("https://zapier.com/hooks/catch/ojzxln/" ,body = list(choice1 = "C"), encode = "form")
t = POST("https://zapier.com/hooks/catch/ojzxln/" ,body = list(choice1 = "C"), encode = "form")
t
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
POST("https://zapier.com/hooks/catch/ojzxln/" ,body = list(date_taken = Sys.time), encode = "form")
as.string(Sys.time)
as.character(Sys.time)
POST("https://zapier.com/hooks/catch/ojzxln/" ,body = list(date_taken = Sys.time()), encode = "form")
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
input$survey_bowl1
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
result_1
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
rand_number_draw1
input$survey_bowl1
result_1
result_1
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
rand_number_draw1
input$survey_bowl1
rand_number_red_balls
result_1
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
deployApp()
library(shinyapps)
deployApp()
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
library(random)
install.packages("random")
library(random)
randomStrings(n=1,len = 6)
randomStrings(n=1,len = 6)
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
shiny::runApp('C:/Users/STEPHANIE/Dropbox/S squared/Ambiguity/ambiguity_app')
setwd("C:/Users/STEPHANIE/Dropbox/coursera/Data products/names_likelihood")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
full_data
input$name
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
input$name
shiny::runApp()
input$name
shiny::runApp()
shiny::runApp()
library(shiny)
full_data <- read.csv("full_data.csv")
survival_prob <- read.csv("all_LT.csv")
names(full_data)
survival_prob <- read.csv("all_LT.csv")
head(survival_prob'')
head(survival_prob)
full_data <- read.csv("full_data.csv")
years = 1916:2013
library(slidify)
input$name = "steven"
input_name <- "Steven"
total_born <- full_data[full_data$name == input_name,
total_born <- full_data[full_data$name == input_name,]
plot(total_born)
plot(total_born)
plot(total_born)
total_born2<- total_born[,2:99]
head(total_born2)
plot(total_born2)
plot(total_born2)
total_born <- full_data[full_data$name == input_name, 2:99]
library(ggplot2)
qplot(total_born)
class(total_born)
class(total_born[1])
View(total_born)
View(full_data)
View(total_born)
head(total_born)
total_born[1,1]
class(total_born[1,1])
as.vector(total_born)
qplot(as.vector(total_born))
test <- data.frame("year" = names(total_born),"number_born" = total_born)
head(test)
test <- data.frame("year" = names(total_born),"number_born" = total_born[1,])
for (i=1:98){}
total_born[1,]
test <- as.vector(total_born)
test22<- data.frame(test)
View(test)
View(test)
test <- as.matrix(total_born,ncol = 1, nrow =98)
test
test[1,6]
dim[test]
library(reshape)
install.packages("reshape")
t(total_born)
test3<-t(total_born)
plot(test3)
survival_prob <- survival_prob[, rev(seq_len(1))]
survival_prob <- read.csv("all_LT.csv")
survival_prob <- survival_prob[, rev(seq_len(2))]
head(survival_prob)
survival_prob <- read.csv("all_LT.csv")
survival_prob <- apply(survival_prob, 2, rev)
head(survival_prob)
survival_prob <- apply(survival_prob, 2, rev)
head(survival_prob)
survival_prob <- read.csv("all_LT.csv")
data_for_name <- full_data[full_data$name == input_name, 2:99]
data_for_name <- t(data_for_name)
names(data_for_name) <- "total_born"
data_for_name$exp_number_living <- data_for_name$total_born *survival_prob[2]
test<-as.data.frame(data_for_name)
test
data_for_name <- full_data[full_data$name == input_name, 2:99]
data_for_name <- as.data.frame(t(data_for_name))
names(data_for_name) <- "total_born"
data_for_name$exp_number_living <- data_for_name$total_born *survival_prob[2]
head(data_for_name)
data_for_name <- full_data[full_data$name == input_name, 2:99]
data_for_name <- as.data.frame(t(data_for_name))
names(data_for_name) <- "total_born"
data_for_name$exp_number_living <- data_for_name$total_born *survival_prob[,2]
head(data_for_name)
survival_prob[,2]
head(survival_prob)
survival_prob <- read.csv("all_LT.csv")
#sort the survival probablitity descending by year
survival_prob <- apply(survival_prob, 2, rev)
data_for_name <- full_data[full_data$name == input_name, 2:99]
data_for_name <- as.data.frame(t(data_for_name))
names(data_for_name) <- "total_born"
data_for_name$exp_number_living <- data_for_name$total_born *survival_prob[,2]
head(survival_prob)
head(data_for_name)
tail(data_for_name)
plot(years, data_for_name$exp_number_living, type = "l", xlab = "", ylab = "Energy sub metering")
par(new=T)
plot(years, data_for_name$total_born, type = "l", col = "red", axes = F, xlab = "", ylab = "")
par(new=T)
legend("topright", c("Expected number living","Total born"),lty=c(1,1),lwd=c(1,1),col=c("red","blue"))
dev.off()
par(new=T)
plot(years, data_for_name$exp_number_living, type = "l", xlab = "", ylab = "Energy sub metering")
plot(years, data_for_name$total_born, type = "l", col = "red", axes = F, xlab = "", ylab = "")
plot(years, data_for_name$exp_number_living, type = "l", col = "blue", xlab = "", ylab = "Energy sub metering")
par(new=T)
plot(years, data_for_name$total_born, type = "l", col = "red", axes = F, xlab = "", ylab = "")
data_for_name
plot(years, data_for_name$exp_number_living, type = "l", col = "blue", xlab = "", ylab = "Energy sub metering")
par(new=T)
plot(years, data_for_name$total_born, type = "l", col = "red", axes = F, ylim = range(0:35000) xlab = "", ylab = "")
par(new=T)
legend("topright", c("Expected number living","Total born"),lty=c(1,1),lwd=c(1,1),col=c("red","blue"))
plot(data_for_name$exp_number_living)
data_for_name$exp_number_living
plot(data_for_name$exp_number_living)
plot(years, data_for_name$exp_number_living, type = "l", col = "blue", xlab = "", ylab = "Energy sub metering")
par(new=T)
plot(years, data_for_name$total_born, type = "l", col = "red", axes = F, ylim = range(0:35000) xlab = "", ylab = "")
par(new=T)
legend("topright", c("Expected number living","Total born"),lty=c(1,1),lwd=c(1,1),col=c("red","blue"))
plot(years, data_for_name$exp_number_living, type = "l", col = "blue", xlab = "", ylab = "Energy sub metering")
par(new=T)
plot(years, data_for_name$total_born, type = "l", col = "red", axes = F, ylim = range(0:35000), xlab = "", ylab = "")
par(new=T)
legend("topright", c("Expected number living","Total born"),lty=c(1,1),lwd=c(1,1),col=c("red","blue"))
data_for_name
survival_prob
plot(years, data_for_name$exp_number_living, type = "l", col = "blue", xlab = "", ylab = "Energy sub metering")
par(new=T)
plot(years, data_for_name$total_born, type = "l", col = "red", axes = F, ylim = range(0:max(data_for_name$total_born)), xlab = "", ylab = "")
par(new=T)
legend("topright", c("Expected number living","Total born"),lty=c(1,1),lwd=c(1,1),col=c("red","blue"))
plot(years, data_for_name$exp_number_living, type = "l", col = "blue", xlab = "", ylim = range(0:max(data_for_name$total_born) ylab = "Energy sub metering")
par(new=T)
plot(years, data_for_name$total_born, type = "l", col = "red", axes = F, ylim = range(0:max(data_for_name$total_born)), xlab = "", ylab = "")
par(new=T)
legend("topright", c("Expected number living","Total born"),lty=c(1,1),lwd=c(1,1),col=c("red","blue"))
plot(years, data_for_name$exp_number_living, type = "l", col = "blue", xlab = "", ylim = range(0:max(data_for_name$total_born)), ylab = "Energy sub metering")
par(new=T)
plot(years, data_for_name$total_born, type = "l", col = "red", axes = F, ylim = range(0:max(data_for_name$total_born)), xlab = "", ylab = "")
par(new=T)
legend("topright", c("Expected number living","Total born"),lty=c(1,1),lwd=c(1,1),col=c("red","blue"))
plot(years, data_for_name$exp_number_living, type = "l", col = "blue", xlab = "", ylim = range(0:max(data_for_name$total_born)), ylab = "Energy sub metering")
par(new=T)
plot(years, data_for_name$total_born, type = "l", col = "red", axes = F, ylim = range(0:max(data_for_name$total_born)), xlab = "", ylab = "")
par(new=T)
legend("topright", c("Total born","Expected number living"),lty=c(1,1),lwd=c(1,1),col=c("red","blue"))
input_name = "Alfred"
#extract the row (not including the name) that matches the inputted name
data_for_name <- full_data[full_data$name == input_name, 2:99]
data_for_name <- as.data.frame(t(data_for_name))
names(data_for_name) <- "total_born"
data_for_name$exp_number_living <- data_for_name$total_born *survival_prob[,2]
plot(years, data_for_name$exp_number_living, type = "l", col = "blue", xlab = "", ylim = range(0:max(data_for_name$total_born)), ylab = "Energy sub metering")
par(new=T)
plot(years, data_for_name$total_born, type = "l", col = "red", axes = F, ylim = range(0:max(data_for_name$total_born)), xlab = "", ylab = "")
par(new=T)
legend("topright", c("Total born","Expected number living"),lty=c(1,1),lwd=c(1,1),col=c("red","blue"))
#extract the row (not including the name) that matches the inputted name
data_for_name <- full_data[full_data$name == input_name, 2:99]
data_for_name <- as.data.frame(t(data_for_name))
names(data_for_name) <- "total_born"
data_for_name$exp_number_living <- data_for_name$total_born *survival_prob[,2]
plot(years, data_for_name$exp_number_living, type = "l", col = "blue", xlab = "Year of birth", ylim = range(0:max(data_for_name$total_born)), ylab = input_name
par(new=T)
plot(years, data_for_name$total_born, type = "l", col = "red", axes = F, ylim = range(0:max(data_for_name$total_born)), xlab = "", ylab = "")
par(new=T)
legend("topright", c("Total born","Expected number living"),lty=c(1,1),lwd=c(1,1),col=c("red","blue"))
plot(years, data_for_name$exp_number_living, type = "l", col = "blue", xlab = "Year of birth", ylim = range(0:max(data_for_name$total_born)), ylab = input_name)
par(new=T)
plot(years, data_for_name$total_born, type = "l", col = "red", axes = F, ylim = range(0:max(data_for_name$total_born)), xlab = "", ylab = "")
par(new=T)
legend("topright", c("Total born","Expected number living"),lty=c(1,1),lwd=c(1,1),col=c("red","blue"))
plot(years, data_for_name$exp_number_living, type = "l", col = "blue", xlab = "Year of birth", ylim = range(0:max(data_for_name$total_born)), main = input_name)
par(new=T)
plot(years, data_for_name$total_born, type = "l", col = "red", axes = F, ylim = range(0:max(data_for_name$total_born)), xlab = "", ylab = "")
par(new=T)
legend("topright", c("Number born","Expected number living"),lty=c(1,1),lwd=c(1,1),col=c("red","blue"))
plot(years, data_for_name$exp_number_living, type = "l", col = "blue", xlab = "Year of birth", ylim = range(0:max(data_for_name$total_born)), ylab= "",main = input_name)
par(new=T)
plot(years, data_for_name$total_born, type = "l", col = "red", axes = F, ylim = range(0:max(data_for_name$total_born)), xlab = "", ylab = "")
par(new=T)
legend("topright", c("Number born","Expected number living"),lty=c(1,1),lwd=c(1,1),col=c("red","blue"))
input_name = "Steph"
plot(years, data_for_name$exp_number_living, type = "l", col = "blue", xlab = "Year of birth", ylim = range(0:max(data_for_name$total_born)), ylab= "",main = input_name)
par(new=T)
plot(years, data_for_name$total_born, type = "l", col = "red", axes = F, ylim = range(0:max(data_for_name$total_born)), xlab = "", ylab = "")
par(new=T)
legend("topright", c("Number born","Expected number living"),lty=c(1,1),lwd=c(1,1),col=c("red","blue"))
data_for_name <- full_data[full_data$name == input_name, 2:99]
data_for_name <- as.data.frame(t(data_for_name))
names(data_for_name) <- "total_born"
data_for_name$exp_number_living <- data_for_name$total_born *survival_prob[,2]
plot(years, data_for_name$exp_number_living, type = "l", col = "blue", xlab = "Year of birth", ylim = range(0:max(data_for_name$total_born)), ylab= "",main = input_name)
par(new=T)
plot(years, data_for_name$total_born, type = "l", col = "red", axes = F, ylim = range(0:max(data_for_name$total_born)), xlab = "", ylab = "")
par(new=T)
legend("topright", c("Number born","Expected number living"),lty=c(1,1),lwd=c(1,1),col=c("red","blue"))
input_name = "Stephanie"
data_for_name <- full_data[full_data$name == input_name, 2:99]
data_for_name <- as.data.frame(t(data_for_name))
names(data_for_name) <- "total_born"
data_for_name$exp_number_living <- data_for_name$total_born *survival_prob[,2]
plot(years, data_for_name$exp_number_living, type = "l", col = "blue", xlab = "Year of birth", ylim = range(0:max(data_for_name$total_born)), ylab= "",main = input_name)
par(new=T)
plot(years, data_for_name$total_born, type = "l", col = "red", axes = F, ylim = range(0:max(data_for_name$total_born)), xlab = "", ylab = "")
par(new=T)
legend("topright", c("Number born","Expected number living"),lty=c(1,1),lwd=c(1,1),col=c("red","blue"))
#make sure the name is lowercase other than the first letter
input_name <- tolower(input$name)
input_name <- paste(toupper(substring(input_name,1,1)),(substring(input_name,2)),sep="")
#extract the row (not including the name) that matches the inputted name
data_for_name <- full_data[full_data$name == input_name, 2:99]
data_for_name <- as.data.frame(t(data_for_name))
names(data_for_name) <- "total_born"
data_for_name$exp_number_living <- data_for_name$total_born *survival_prob[,2]
plot(years, data_for_name$exp_number_living, type = "l", col = "blue", xlab = "Year of birth", ylim = range(0:max(data_for_name$total_born)*1.5), ylab= "",main = input_name)
par(new=T)
plot(years, data_for_name$total_born, type = "l", col = "red", axes = F, ylim = range(0:max(data_for_name$total_born)*1.5), xlab = "", ylab = "")
par(new=T)
legend("topright", c("Number born","Expected number living"),lty=c(1,1),lwd=c(1,1),col=c("red","blue"))
tail(data_for_name)
input_name = "Carolyn"
#make sure the name is lowercase other than the first letter
input_name <- tolower(input$name)
input_name <- paste(toupper(substring(input_name,1,1)),(substring(input_name,2)),sep="")
#extract the row (not including the name) that matches the inputted name
data_for_name <- full_data[full_data$name == input_name, 2:99]
data_for_name <- as.data.frame(t(data_for_name))
names(data_for_name) <- "total_born"
data_for_name$exp_number_living <- data_for_name$total_born *survival_prob[,2]
plot(years, data_for_name$exp_number_living, type = "l", col = "blue", xlab = "Year of birth", ylim = range(0:max(data_for_name$total_born)*1.5), ylab= "",main = input_name)
par(new=T)
plot(years, data_for_name$total_born, type = "l", col = "red", axes = F, ylim = range(0:max(data_for_name$total_born)*1.5), xlab = "", ylab = "")
par(new=T)
legend("topright", c("Number born","Expected number living"),lty=c(1,1),lwd=c(1,1),col=c("red","blue"))
